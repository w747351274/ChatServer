// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto

#ifndef PROTOBUF_INCLUDED_main_2eproto
#define PROTOBUF_INCLUDED_main_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_main_2eproto 

namespace protobuf_main_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_main_2eproto
namespace proto {
class Conversation;
class ConversationDefaultTypeInternal;
extern ConversationDefaultTypeInternal _Conversation_default_instance_;
class ConversationListRequest;
class ConversationListRequestDefaultTypeInternal;
extern ConversationListRequestDefaultTypeInternal _ConversationListRequest_default_instance_;
class ConversationListResponse;
class ConversationListResponseDefaultTypeInternal;
extern ConversationListResponseDefaultTypeInternal _ConversationListResponse_default_instance_;
class HelloRequest;
class HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class HelloResponse;
class HelloResponseDefaultTypeInternal;
extern HelloResponseDefaultTypeInternal _HelloResponse_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::Conversation* Arena::CreateMaybeMessage<::proto::Conversation>(Arena*);
template<> ::proto::ConversationListRequest* Arena::CreateMaybeMessage<::proto::ConversationListRequest>(Arena*);
template<> ::proto::ConversationListResponse* Arena::CreateMaybeMessage<::proto::ConversationListResponse>(Arena*);
template<> ::proto::HelloRequest* Arena::CreateMaybeMessage<::proto::HelloRequest>(Arena*);
template<> ::proto::HelloResponse* Arena::CreateMaybeMessage<::proto::HelloResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

enum ConversationListRequest_FilterType {
  ConversationListRequest_FilterType_DEFAULT = 0,
  ConversationListRequest_FilterType_ALL = 1,
  ConversationListRequest_FilterType_NEAR_BY = 2,
  ConversationListRequest_FilterType_FRIENDS = 3,
  ConversationListRequest_FilterType_HOT = 4,
  ConversationListRequest_FilterType_ConversationListRequest_FilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ConversationListRequest_FilterType_ConversationListRequest_FilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ConversationListRequest_FilterType_IsValid(int value);
const ConversationListRequest_FilterType ConversationListRequest_FilterType_FilterType_MIN = ConversationListRequest_FilterType_DEFAULT;
const ConversationListRequest_FilterType ConversationListRequest_FilterType_FilterType_MAX = ConversationListRequest_FilterType_HOT;
const int ConversationListRequest_FilterType_FilterType_ARRAYSIZE = ConversationListRequest_FilterType_FilterType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ConversationListRequest_FilterType_descriptor();
inline const ::std::string& ConversationListRequest_FilterType_Name(ConversationListRequest_FilterType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ConversationListRequest_FilterType_descriptor(), value);
}
inline bool ConversationListRequest_FilterType_Parse(
    const ::std::string& name, ConversationListRequest_FilterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ConversationListRequest_FilterType>(
    ConversationListRequest_FilterType_descriptor(), name, value);
}
enum CmdID {
  CMD_ID_UNKNOWN = 0,
  CMD_ID_HELLO = 1,
  CMD_ID_AUTH = 2,
  CMD_ID_SEND_MESSAGE = 3,
  CMD_ID_CONVERSATION_LIST = 4,
  CMD_ID_JOINTOPIC = 5,
  CMD_ID_LEFTTOPIC = 7,
  CmdID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdID_IsValid(int value);
const CmdID CmdID_MIN = CMD_ID_UNKNOWN;
const CmdID CmdID_MAX = CMD_ID_LEFTTOPIC;
const int CmdID_ARRAYSIZE = CmdID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdID_descriptor();
inline const ::std::string& CmdID_Name(CmdID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdID_descriptor(), value);
}
inline bool CmdID_Parse(
    const ::std::string& name, CmdID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdID>(
    CmdID_descriptor(), name, value);
}
// ===================================================================

class HelloRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HelloRequest) */ {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HelloRequest* other);
  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const final {
    return CreateMaybeMessage<HelloRequest>(NULL);
  }

  HelloRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user = 1;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::std::string& user() const;
  void set_user(const ::std::string& value);
  #if LANG_CXX11
  void set_user(::std::string&& value);
  #endif
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  ::std::string* mutable_user();
  ::std::string* release_user();
  void set_allocated_user(::std::string* user);

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:proto.HelloRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_main_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HelloResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HelloResponse) */ {
 public:
  HelloResponse();
  virtual ~HelloResponse();

  HelloResponse(const HelloResponse& from);

  inline HelloResponse& operator=(const HelloResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloResponse(HelloResponse&& from) noexcept
    : HelloResponse() {
    *this = ::std::move(from);
  }

  inline HelloResponse& operator=(HelloResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloResponse* internal_default_instance() {
    return reinterpret_cast<const HelloResponse*>(
               &_HelloResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HelloResponse* other);
  friend void swap(HelloResponse& a, HelloResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloResponse* New() const final {
    return CreateMaybeMessage<HelloResponse>(NULL);
  }

  HelloResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloResponse& from);
  void MergeFrom(const HelloResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.HelloResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 retcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_main_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Conversation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Conversation) */ {
 public:
  Conversation();
  virtual ~Conversation();

  Conversation(const Conversation& from);

  inline Conversation& operator=(const Conversation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Conversation(Conversation&& from) noexcept
    : Conversation() {
    *this = ::std::move(from);
  }

  inline Conversation& operator=(Conversation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Conversation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Conversation* internal_default_instance() {
    return reinterpret_cast<const Conversation*>(
               &_Conversation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Conversation* other);
  friend void swap(Conversation& a, Conversation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Conversation* New() const final {
    return CreateMaybeMessage<Conversation>(NULL);
  }

  Conversation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Conversation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Conversation& from);
  void MergeFrom(const Conversation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Conversation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string notice = 2;
  void clear_notice();
  static const int kNoticeFieldNumber = 2;
  const ::std::string& notice() const;
  void set_notice(const ::std::string& value);
  #if LANG_CXX11
  void set_notice(::std::string&& value);
  #endif
  void set_notice(const char* value);
  void set_notice(const char* value, size_t size);
  ::std::string* mutable_notice();
  ::std::string* release_notice();
  void set_allocated_notice(::std::string* notice);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto.Conversation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr notice_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_main_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConversationListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ConversationListRequest) */ {
 public:
  ConversationListRequest();
  virtual ~ConversationListRequest();

  ConversationListRequest(const ConversationListRequest& from);

  inline ConversationListRequest& operator=(const ConversationListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConversationListRequest(ConversationListRequest&& from) noexcept
    : ConversationListRequest() {
    *this = ::std::move(from);
  }

  inline ConversationListRequest& operator=(ConversationListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConversationListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConversationListRequest* internal_default_instance() {
    return reinterpret_cast<const ConversationListRequest*>(
               &_ConversationListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ConversationListRequest* other);
  friend void swap(ConversationListRequest& a, ConversationListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConversationListRequest* New() const final {
    return CreateMaybeMessage<ConversationListRequest>(NULL);
  }

  ConversationListRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConversationListRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConversationListRequest& from);
  void MergeFrom(const ConversationListRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConversationListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConversationListRequest_FilterType FilterType;
  static const FilterType DEFAULT =
    ConversationListRequest_FilterType_DEFAULT;
  static const FilterType ALL =
    ConversationListRequest_FilterType_ALL;
  static const FilterType NEAR_BY =
    ConversationListRequest_FilterType_NEAR_BY;
  static const FilterType FRIENDS =
    ConversationListRequest_FilterType_FRIENDS;
  static const FilterType HOT =
    ConversationListRequest_FilterType_HOT;
  static inline bool FilterType_IsValid(int value) {
    return ConversationListRequest_FilterType_IsValid(value);
  }
  static const FilterType FilterType_MIN =
    ConversationListRequest_FilterType_FilterType_MIN;
  static const FilterType FilterType_MAX =
    ConversationListRequest_FilterType_FilterType_MAX;
  static const int FilterType_ARRAYSIZE =
    ConversationListRequest_FilterType_FilterType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FilterType_descriptor() {
    return ConversationListRequest_FilterType_descriptor();
  }
  static inline const ::std::string& FilterType_Name(FilterType value) {
    return ConversationListRequest_FilterType_Name(value);
  }
  static inline bool FilterType_Parse(const ::std::string& name,
      FilterType* value) {
    return ConversationListRequest_FilterType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string access_token = 1;
  void clear_access_token();
  static const int kAccessTokenFieldNumber = 1;
  const ::std::string& access_token() const;
  void set_access_token(const ::std::string& value);
  #if LANG_CXX11
  void set_access_token(::std::string&& value);
  #endif
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  ::std::string* mutable_access_token();
  ::std::string* release_access_token();
  void set_allocated_access_token(::std::string* access_token);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.ConversationListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr access_token_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_main_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConversationListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ConversationListResponse) */ {
 public:
  ConversationListResponse();
  virtual ~ConversationListResponse();

  ConversationListResponse(const ConversationListResponse& from);

  inline ConversationListResponse& operator=(const ConversationListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConversationListResponse(ConversationListResponse&& from) noexcept
    : ConversationListResponse() {
    *this = ::std::move(from);
  }

  inline ConversationListResponse& operator=(ConversationListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConversationListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConversationListResponse* internal_default_instance() {
    return reinterpret_cast<const ConversationListResponse*>(
               &_ConversationListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ConversationListResponse* other);
  friend void swap(ConversationListResponse& a, ConversationListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConversationListResponse* New() const final {
    return CreateMaybeMessage<ConversationListResponse>(NULL);
  }

  ConversationListResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConversationListResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConversationListResponse& from);
  void MergeFrom(const ConversationListResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConversationListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Conversation list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::proto::Conversation* mutable_list(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::Conversation >*
      mutable_list();
  const ::proto::Conversation& list(int index) const;
  ::proto::Conversation* add_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::Conversation >&
      list() const;

  // @@protoc_insertion_point(class_scope:proto.ConversationListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::Conversation > list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_main_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloRequest

// string user = 1;
inline void HelloRequest::clear_user() {
  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRequest::user() const {
  // @@protoc_insertion_point(field_get:proto.HelloRequest.user)
  return user_.GetNoArena();
}
inline void HelloRequest::set_user(const ::std::string& value) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HelloRequest.user)
}
#if LANG_CXX11
inline void HelloRequest::set_user(::std::string&& value) {
  
  user_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloRequest.user)
}
#endif
inline void HelloRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HelloRequest.user)
}
inline void HelloRequest::set_user(const char* value, size_t size) {
  
  user_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HelloRequest.user)
}
inline ::std::string* HelloRequest::mutable_user() {
  
  // @@protoc_insertion_point(field_mutable:proto.HelloRequest.user)
  return user_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRequest::release_user() {
  // @@protoc_insertion_point(field_release:proto.HelloRequest.user)
  
  return user_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_allocated_user(::std::string* user) {
  if (user != NULL) {
    
  } else {
    
  }
  user_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user);
  // @@protoc_insertion_point(field_set_allocated:proto.HelloRequest.user)
}

// string text = 2;
inline void HelloRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRequest::text() const {
  // @@protoc_insertion_point(field_get:proto.HelloRequest.text)
  return text_.GetNoArena();
}
inline void HelloRequest::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HelloRequest.text)
}
#if LANG_CXX11
inline void HelloRequest::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloRequest.text)
}
#endif
inline void HelloRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HelloRequest.text)
}
inline void HelloRequest::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HelloRequest.text)
}
inline ::std::string* HelloRequest::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:proto.HelloRequest.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRequest::release_text() {
  // @@protoc_insertion_point(field_release:proto.HelloRequest.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.HelloRequest.text)
}

// -------------------------------------------------------------------

// HelloResponse

// int32 retcode = 1;
inline void HelloResponse::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 HelloResponse::retcode() const {
  // @@protoc_insertion_point(field_get:proto.HelloResponse.retcode)
  return retcode_;
}
inline void HelloResponse::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.HelloResponse.retcode)
}

// string errmsg = 2;
inline void HelloResponse::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:proto.HelloResponse.errmsg)
  return errmsg_.GetNoArena();
}
inline void HelloResponse::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HelloResponse.errmsg)
}
#if LANG_CXX11
inline void HelloResponse::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HelloResponse.errmsg)
}
#endif
inline void HelloResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HelloResponse.errmsg)
}
inline void HelloResponse::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HelloResponse.errmsg)
}
inline ::std::string* HelloResponse::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:proto.HelloResponse.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:proto.HelloResponse.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloResponse::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:proto.HelloResponse.errmsg)
}

// -------------------------------------------------------------------

// Conversation

// string topic = 1;
inline void Conversation::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conversation::topic() const {
  // @@protoc_insertion_point(field_get:proto.Conversation.topic)
  return topic_.GetNoArena();
}
inline void Conversation::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Conversation.topic)
}
#if LANG_CXX11
inline void Conversation::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Conversation.topic)
}
#endif
inline void Conversation::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Conversation.topic)
}
inline void Conversation::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Conversation.topic)
}
inline ::std::string* Conversation::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:proto.Conversation.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conversation::release_topic() {
  // @@protoc_insertion_point(field_release:proto.Conversation.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conversation::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:proto.Conversation.topic)
}

// string notice = 2;
inline void Conversation::clear_notice() {
  notice_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conversation::notice() const {
  // @@protoc_insertion_point(field_get:proto.Conversation.notice)
  return notice_.GetNoArena();
}
inline void Conversation::set_notice(const ::std::string& value) {
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Conversation.notice)
}
#if LANG_CXX11
inline void Conversation::set_notice(::std::string&& value) {
  
  notice_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Conversation.notice)
}
#endif
inline void Conversation::set_notice(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Conversation.notice)
}
inline void Conversation::set_notice(const char* value, size_t size) {
  
  notice_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Conversation.notice)
}
inline ::std::string* Conversation::mutable_notice() {
  
  // @@protoc_insertion_point(field_mutable:proto.Conversation.notice)
  return notice_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conversation::release_notice() {
  // @@protoc_insertion_point(field_release:proto.Conversation.notice)
  
  return notice_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conversation::set_allocated_notice(::std::string* notice) {
  if (notice != NULL) {
    
  } else {
    
  }
  notice_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), notice);
  // @@protoc_insertion_point(field_set_allocated:proto.Conversation.notice)
}

// string name = 3;
inline void Conversation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Conversation::name() const {
  // @@protoc_insertion_point(field_get:proto.Conversation.name)
  return name_.GetNoArena();
}
inline void Conversation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Conversation.name)
}
#if LANG_CXX11
inline void Conversation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Conversation.name)
}
#endif
inline void Conversation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Conversation.name)
}
inline void Conversation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Conversation.name)
}
inline ::std::string* Conversation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Conversation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Conversation::release_name() {
  // @@protoc_insertion_point(field_release:proto.Conversation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Conversation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Conversation.name)
}

// -------------------------------------------------------------------

// ConversationListRequest

// string access_token = 1;
inline void ConversationListRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConversationListRequest::access_token() const {
  // @@protoc_insertion_point(field_get:proto.ConversationListRequest.access_token)
  return access_token_.GetNoArena();
}
inline void ConversationListRequest::set_access_token(const ::std::string& value) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ConversationListRequest.access_token)
}
#if LANG_CXX11
inline void ConversationListRequest::set_access_token(::std::string&& value) {
  
  access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ConversationListRequest.access_token)
}
#endif
inline void ConversationListRequest::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ConversationListRequest.access_token)
}
inline void ConversationListRequest::set_access_token(const char* value, size_t size) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ConversationListRequest.access_token)
}
inline ::std::string* ConversationListRequest::mutable_access_token() {
  
  // @@protoc_insertion_point(field_mutable:proto.ConversationListRequest.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConversationListRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:proto.ConversationListRequest.access_token)
  
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConversationListRequest::set_allocated_access_token(::std::string* access_token) {
  if (access_token != NULL) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:proto.ConversationListRequest.access_token)
}

// int32 type = 2;
inline void ConversationListRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 ConversationListRequest::type() const {
  // @@protoc_insertion_point(field_get:proto.ConversationListRequest.type)
  return type_;
}
inline void ConversationListRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.ConversationListRequest.type)
}

// -------------------------------------------------------------------

// ConversationListResponse

// repeated .proto.Conversation list = 1;
inline int ConversationListResponse::list_size() const {
  return list_.size();
}
inline void ConversationListResponse::clear_list() {
  list_.Clear();
}
inline ::proto::Conversation* ConversationListResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ConversationListResponse.list)
  return list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Conversation >*
ConversationListResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ConversationListResponse.list)
  return &list_;
}
inline const ::proto::Conversation& ConversationListResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ConversationListResponse.list)
  return list_.Get(index);
}
inline ::proto::Conversation* ConversationListResponse::add_list() {
  // @@protoc_insertion_point(field_add:proto.ConversationListResponse.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Conversation >&
ConversationListResponse::list() const {
  // @@protoc_insertion_point(field_list:proto.ConversationListResponse.list)
  return list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::ConversationListRequest_FilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ConversationListRequest_FilterType>() {
  return ::proto::ConversationListRequest_FilterType_descriptor();
}
template <> struct is_proto_enum< ::proto::CmdID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::CmdID>() {
  return ::proto::CmdID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_main_2eproto
